name: Deploy to Vercel & AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Frontend build and test
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Set build environment
        run: |
          if [ -n "${{ secrets.VITE_SERVER_URL }}" ]; then
            echo "VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}" >> $GITHUB_ENV
          else
            echo "VITE_SERVER_URL=http://localhost:3001" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_APP_NAME }}" ]; then
            echo "VITE_APP_NAME=${{ secrets.VITE_APP_NAME }}" >> $GITHUB_ENV
          else
            echo "VITE_APP_NAME=MeetTime" >> $GITHUB_ENV
          fi

      - name: Build application
        run: npm run build

  # Frontend deployment to Vercel (optional - only runs if secrets are configured)
  frontend-deploy:
    runs-on: ubuntu-latest
    needs: frontend-test
    if: github.event_name == 'push'
    steps:
      - name: Check Vercel secrets
        id: check-secrets
        run: |
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "Vercel secrets not configured. Skipping deployment."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Vercel secrets found. Proceeding with deployment."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Checkout code
        if: steps.check-secrets.outputs.skip != 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.check-secrets.outputs.skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        if: steps.check-secrets.outputs.skip != 'true'
        run: npm ci

      - name: Build application
        if: steps.check-secrets.outputs.skip != 'true'
        run: npm run build
        env:
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL || 'http://localhost:3001' }}
          VITE_APP_NAME: ${{ secrets.VITE_APP_NAME || 'MeetTime' }}

      - name: Deploy to Vercel
        if: steps.check-secrets.outputs.skip != 'true'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Backend deployment to AWS (or other cloud provider)
  backend-deploy:
    runs-on: ubuntu-latest
    needs: frontend-deploy
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      - name: Run backend tests
        working-directory: ./server
        run: npm test || echo "No tests defined"

      - name: Build backend (if needed)
        working-directory: ./server
        run: npm run build || echo "No build script"

      - name: Deploy to Railway
        run: |
          # Install Railway CLI
          curl -fsSL https://railway.app/install.sh | sh

          # Login to Railway (requires RAILWAY_TOKEN secret)
          if [ -n "$RAILWAY_TOKEN" ]; then
            railway login --token $RAILWAY_TOKEN

            # Deploy to Railway
            cd server
            railway deploy --detach

            # Get the deployment URL
            echo "Backend deployed to Railway"
            railway domain || echo "Domain not set, check Railway dashboard"
          else
            echo "RAILWAY_TOKEN not configured. Please set up Railway deployment manually."
            echo "1. Go to https://railway.app"
            echo "2. Create a new project"
            echo "3. Connect your GitHub repository"
            echo "4. Deploy the server directory"
            echo "5. Get the deployment URL and update VITE_SERVER_URL in Vercel"
          fi
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [frontend-deploy]
    if: github.event_name == 'push'
    steps:
      - name: Wait for deployments
        run: sleep 30

      - name: Check frontend health
        run: |
          if [ -n "${{ secrets.FRONTEND_URL }}" ]; then
            curl -f "${{ secrets.FRONTEND_URL }}" || exit 1
          fi

      - name: Check backend health
        run: |
          if [ -n "${{ secrets.BACKEND_URL }}" ]; then
            curl -f "${{ secrets.BACKEND_URL }}/health" || exit 1
          fi